@page "/themed-cards"
@using EasyEnglish.Theme.Components
@using EasyEnglish.Theme.Constants
@inject IThemeService ThemeService

<Container Type="ContainerType.Screen">
    <div class="@ThemeConstants.CssClasses.Padding.Lg">
        
        <!-- Header -->
        <div class="@ThemeConstants.CssClasses.Margin.BottomXl">
            <H1 CssClass="@ThemeConstants.CssClasses.TextPrimary @ThemeConstants.CssClasses.Margin.BottomMd">
                🧩 Components Demo
            </H1>
            <p class="@ThemeConstants.CssClasses.BodyLarge @ThemeConstants.CssClasses.TextSecondary">
                Explore the comprehensive component library provided by EasyEnglish.Theme.
            </p>
        </div>

        <!-- Cards Section -->
        <div class="@ThemeConstants.CssClasses.Margin.BottomXl">
            <H2 CssClass="@ThemeConstants.CssClasses.Margin.BottomMd">Cards</H2>
            <div class="cards-demo">
                <Card Title="Simple Card">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                        This is a simple card with basic content.
                    </p>
                </Card>
                
                <Card Title="Card with Actions" Size="CardSize.Medium">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.BottomMd">
                        This card includes action buttons at the bottom.
                    </p>
                    <div class="card-actions">
                        <Button Variant="ButtonVariant.Primary" Size="ButtonSize.Small">Accept</Button>
                        <Button Variant="ButtonVariant.Outline" Size="ButtonSize.Small">Cancel</Button>
                    </div>
                </Card>
                
                <Card Title="Large Card" Size="CardSize.Large">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                        This is a large card with more padding and space for content.
                    </p>
                </Card>
            </div>
        </div>

    </div>
</Container>

<style>
    .component-demo {
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-lg);
        padding: var(--spacing-lg);
    }

    .progress-section {
        margin-bottom: var(--spacing-lg);
    }

    .progress-section > * {
        margin-bottom: var(--spacing-md);
    }

    .loading-section {
        text-align: center;
    }

    .typography-demo {
        background-color: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-lg);
        padding: var(--spacing-lg);
    }

    .typography-demo > * {
        margin-bottom: var(--spacing-md);
    }

    .interactive-demo {
        padding: var(--spacing-md);
    }

    .demo-controls {
        display: flex;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .demo-row {
            flex-direction: column;
        }
        
        .cards-demo {
            grid-template-columns: 1fr;
        }
        
        .input-row {
            grid-template-columns: 1fr;
        }
        
        .demo-controls {
            flex-direction: column;
        }
    }
</style>

@code {
    private string textValue = "";
    private string passwordValue = "";
    private string emailValue = "";
    private string numberValue = "";
    private string textareaValue = "";
    private string errorValue = "";
    
    private bool isLoading = false;
    private string demoMessage = "";
    private string buttonText = "Click Me!";
    private int clickCount = 0;

    private async Task HandleDemoAction()
    {
        clickCount++;
        buttonText = $"Clicked {clickCount} times!";
        demoMessage = $"Button clicked at {DateTime.Now:HH:mm:ss}";
        
        await Task.Delay(1000);
        demoMessage = "";
        StateHasChanged();
    }

    private void ToggleLoading()
    {
        isLoading = !isLoading;
    }
}