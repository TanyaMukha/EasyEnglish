@page "/themed-inputs"
@using EasyEnglish.Theme.Components
@using EasyEnglish.Theme.Constants
@inject IThemeService ThemeService

<Container Type="ContainerType.Screen">
    <div class="@ThemeConstants.CssClasses.Padding.Lg">
        
        <!-- Header -->
        <div class="@ThemeConstants.CssClasses.Margin.BottomXl">
            <H1 CssClass="@ThemeConstants.CssClasses.TextPrimary @ThemeConstants.CssClasses.Margin.BottomMd">
                🧩 Components Demo
            </H1>
            <p class="@ThemeConstants.CssClasses.BodyLarge @ThemeConstants.CssClasses.TextSecondary">
                Explore the comprehensive component library provided by EasyEnglish.Theme.
            </p>
        </div>

        <!-- Input Fields Section -->
        <div class="@ThemeConstants.CssClasses.Margin.BottomXl">
            <H2 CssClass="@ThemeConstants.CssClasses.Margin.BottomMd">Input Fields</H2>
            <div class="inputs-demo">
                <div class="input-row">
                    <Input Label="Text Input" 
                           Placeholder="Enter some text"
                           Value="@textValue"
                           ValueChanged="@((string value) => textValue = value)" />
                    <Input Label="Password Input" 
                           Type="password"
                           Placeholder="Enter password"
                           Value="@passwordValue"
                           ValueChanged="@((string value) => passwordValue = value)" />
                </div>
                <div class="input-row">
                    <Input Label="Email Input" 
                           Type="email"
                           Placeholder="Enter email"
                           Value="@emailValue"
                           ValueChanged="@((string value) => emailValue = value)" />
                    <Input Label="Number Input" 
                           Type="number"
                           Placeholder="Enter number"
                           Value="@numberValue"
                           ValueChanged="@((string value) => numberValue = value)" />
                </div>
                <div class="input-row">
                    <Input Label="Textarea" 
                           Multiline="true"
                           Rows="4"
                           Placeholder="Enter multiple lines..."
                           Value="@textareaValue"
                           ValueChanged="@((string value) => textareaValue = value)" />
                </div>
                <div class="input-row">
                    <Input Label="Input with Error" 
                           Placeholder="This field has an error"
                           HasError="true"
                           ErrorMessage="This field is required"
                           Value="@errorValue"
                           ValueChanged="@((string value) => errorValue = value)" />
                </div>
            </div>
        </div>

    </div>
</Container>

<style>
    .component-demo {
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-lg);
        padding: var(--spacing-lg);
    }

    .progress-section {
        margin-bottom: var(--spacing-lg);
    }

    .progress-section > * {
        margin-bottom: var(--spacing-md);
    }

    .loading-section {
        text-align: center;
    }

    .typography-demo {
        background-color: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-lg);
        padding: var(--spacing-lg);
    }

    .typography-demo > * {
        margin-bottom: var(--spacing-md);
    }

    .interactive-demo {
        padding: var(--spacing-md);
    }

    .demo-controls {
        display: flex;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .demo-row {
            flex-direction: column;
        }
        
        .cards-demo {
            grid-template-columns: 1fr;
        }
        
        .input-row {
            grid-template-columns: 1fr;
        }
        
        .demo-controls {
            flex-direction: column;
        }
    }
</style>

@code {
    private string textValue = "";
    private string passwordValue = "";
    private string emailValue = "";
    private string numberValue = "";
    private string textareaValue = "";
    private string errorValue = "";
    
    private bool isLoading = false;
    private string demoMessage = "";
    private string buttonText = "Click Me!";
    private int clickCount = 0;

    private async Task HandleDemoAction()
    {
        clickCount++;
        buttonText = $"Clicked {clickCount} times!";
        demoMessage = $"Button clicked at {DateTime.Now:HH:mm:ss}";
        
        await Task.Delay(1000);
        demoMessage = "";
        StateHasChanged();
    }

    private void ToggleLoading()
    {
        isLoading = !isLoading;
    }
}