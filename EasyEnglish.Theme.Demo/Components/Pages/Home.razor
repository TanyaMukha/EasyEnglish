@page "/"
@using EasyEnglish.Theme.Components
@using EasyEnglish.Theme.Constants
@using EasyEnglish.Theme.Interfaces
@inject IThemeService ThemeService
@inject IResponsiveService ResponsiveService
@inject IColorService ColorService
@inject NavigationManager Navigation

<PageTitle>EasyEnglish Theme Demo - Modern UI Components</PageTitle>

<Container Type="ContainerType.Screen">
    <div class="@ThemeConstants.CssClasses.Padding.Lg">
        
        <!-- Hero Section -->
        <div class="hero-section @ThemeConstants.CssClasses.Margin.BottomXl">
            <div class="hero-content">
                <div class="hero-badge @ThemeConstants.CssClasses.Margin.BottomMd">
                    <Badge Variant="BadgeVariant.Success">v1.0.0</Badge>
                    <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Theme System</span>
                </div>
                
                <H1 CssClass="hero-title @ThemeConstants.CssClasses.TextPrimary @ThemeConstants.CssClasses.Margin.BottomMd">
                    🎨 EasyEnglish Theme Demo
                </H1>
                
                <p class="hero-description @ThemeConstants.CssClasses.BodyLarge @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.BottomLg">
                    Comprehensive theme system for .NET MAUI Blazor applications featuring modern dark UI, 
                    responsive design, and specialized components for language learning applications.
                </p>
                
                <!-- Quick Stats -->
                <div class="stats-grid @ThemeConstants.CssClasses.Margin.BottomLg">
                    <div class="stat-item">
                        <span class="stat-number @ThemeConstants.CssClasses.H2 @ThemeConstants.CssClasses.TextPrimary">50+</span>
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Components</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number @ThemeConstants.CssClasses.H2 @ThemeConstants.CssClasses.TextAccent">12</span>
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Color Palettes</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number @ThemeConstants.CssClasses.H2 @ThemeConstants.CssClasses.TextSuccess">100%</span>
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Responsive</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number @ThemeConstants.CssClasses.H2 @ThemeConstants.CssClasses.TextInfo">TypeScript</span>
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Style</span>
                    </div>
                </div>
                
                <!-- CTA Buttons -->
                <div class="cta-buttons">
                    <Button Variant="ButtonVariant.Primary" Size="ButtonSize.Large" OnClick="@(() => NavigateToPage("/components"))">
                        🚀 Explore Components
                    </Button>
                    <Button Variant="ButtonVariant.Outline" Size="ButtonSize.Large" OnClick="@(() => NavigateToPage("/colors"))">
                        🎨 View Colors
                    </Button>
                </div>
            </div>
            
            <!-- Theme Status Card -->
            <Card Title="Theme Status" Size="CardSize.Medium" CssClass="status-card">
                <div class="status-grid">
                    <div class="status-item">
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Provider</span>
                        <Badge Variant="BadgeVariant.Success">Active</Badge>
                    </div>
                    <div class="status-item">
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Screen</span>
                        <Badge Variant="BadgeVariant.Info">@currentScreenSize</Badge>
                    </div>
                    <div class="status-item">
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Responsive</span>
                        <Badge Variant="BadgeVariant.Primary">@GetResponsiveStatus()</Badge>
                    </div>
                    <div class="status-item">
                        <span class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextSecondary">Dark Mode</span>
                        <Badge Variant="BadgeVariant.Warning">Enabled</Badge>
                    </div>
                </div>
            </Card>
        </div>

        <!-- Quick Overview Cards -->
        <div class="section-header @ThemeConstants.CssClasses.Margin.BottomLg">
            <H2 CssClass="@ThemeConstants.CssClasses.TextPrimary">🚀 Quick Start</H2>
            <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                Explore the main features of the theme system
            </p>
        </div>
        
        <div class="demo-grid @ThemeConstants.CssClasses.Margin.BottomXl">
            <div class="demo-overview-card" @onclick="@(() => NavigateToPage("/colors"))">
                <Card Title="🎨 Color System" Size="CardSize.Large" CssClass="interactive-card">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.Margin.BottomMd @ThemeConstants.CssClasses.TextSecondary">
                        Modern dark palette with semantic colors, language levels (A1-C2), and part-of-speech colors for educational apps.
                    </p>
                    <div class="color-preview @ThemeConstants.CssClasses.Margin.BottomMd">
                        <div class="color-swatch" style="background-color: #6366F1;"></div>
                        <div class="color-swatch" style="background-color: #10B981;"></div>
                        <div class="color-swatch" style="background-color: #F59E0B;"></div>
                        <div class="color-swatch" style="background-color: #EF4444;"></div>
                        <div class="color-swatch" style="background-color: #8B5CF6;"></div>
                    </div>
                    <Button Variant="ButtonVariant.Outline" Icon="fas fa-arrow-right">Explore Colors</Button>
                </Card>
            </div>

            <div class="demo-overview-card" @onclick="@(() => NavigateToPage("/typography"))">
                <Card Title="📝 Typography" Size="CardSize.Large" CssClass="interactive-card">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.Margin.BottomMd @ThemeConstants.CssClasses.TextSecondary">
                        Responsive typography scale with consistent line heights, weights, and semantic text styles.
                    </p>
                    <div class="typography-preview @ThemeConstants.CssClasses.Margin.BottomMd">
                        <div class="@ThemeConstants.CssClasses.H3 @ThemeConstants.CssClasses.TextPrimary">Heading</div>
                        <div class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">Body text</div>
                        <div class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextTertiary">Caption</div>
                    </div>
                    <Button Variant="ButtonVariant.Outline" Icon="fas fa-arrow-right">View Typography</Button>
                </Card>
            </div>

            <div class="demo-overview-card" @onclick="@(() => NavigateToPage("/components"))">
                <Card Title="🧩 Components" Size="CardSize.Large" CssClass="interactive-card">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.Margin.BottomMd @ThemeConstants.CssClasses.TextSecondary">
                        Rich component library with buttons, inputs, cards, badges, progress bars and more.
                    </p>
                    <div class="component-preview @ThemeConstants.CssClasses.Margin.BottomMd">
                        <Button Variant="ButtonVariant.Primary" Size="ButtonSize.Small">Button</Button>
                        <Badge Variant="BadgeVariant.Level" Level="B2">B2</Badge>
                        <!--CssClass="mini-progress" -->
                        <ProgressBar Progress="75" />
                    </div>
                    <Button Variant="ButtonVariant.Outline" Icon="fas fa-arrow-right">Browse Components</Button>
                </Card>
            </div>

            <div class="demo-overview-card" @onclick="@(() => NavigateToPage("/spacing"))">
                <Card Title="📐 Spacing System" Size="CardSize.Large" CssClass="interactive-card">
                    <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.Margin.BottomMd @ThemeConstants.CssClasses.TextSecondary">
                        8pt grid system with consistent spacing utilities for perfect layouts and visual rhythm.
                    </p>
                    <div class="spacing-preview @ThemeConstants.CssClasses.Margin.BottomMd">
                        <div class="spacing-demo"></div>
                        <div class="spacing-demo"></div>
                        <div class="spacing-demo"></div>
                    </div>
                    <Button Variant="ButtonVariant.Outline" Icon="fas fa-arrow-right">Explore Spacing</Button>
                </Card>
            </div>
        </div>

        <!-- Features Grid -->
        <div class="section-header @ThemeConstants.CssClasses.Margin.BottomLg">
            <H2 CssClass="@ThemeConstants.CssClasses.TextPrimary">✨ Key Features</H2>
            <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                Everything you need for modern app development
            </p>
        </div>
        
        <div class="features-grid @ThemeConstants.CssClasses.Margin.BottomXl">
            <Card Title="🎨 Modern Design" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">🎨</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    Professional dark theme with carefully crafted colors and modern aesthetic principles.
                </p>
            </Card>
            
            <Card Title="📱 Responsive" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">📱</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    Automatic adaptation to different screen sizes with mobile-first approach.
                </p>
            </Card>
            
            <Card Title="🧩 Rich Components" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">🧩</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    Comprehensive component library ready for production use with TypeScript-style constants.
                </p>
            </Card>
            
            <Card Title="🌐 Language Support" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">🌐</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    Special colors and components for language learning applications (A1-C2 levels).
                </p>
            </Card>

            <Card Title="⚡ Performance" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">⚡</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    CSS variables and optimized rendering for smooth animations and fast loading.
                </p>
            </Card>

            <Card Title="🔧 Customizable" Size="CardSize.Medium" CssClass="feature-card">
                <div class="feature-icon">🔧</div>
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                    Easy customization through configuration with support for custom colors and breakpoints.
                </p>
            </Card>
        </div>

        <!-- Language Levels Demo -->
        <div class="section-header @ThemeConstants.CssClasses.Margin.BottomLg">
            <H2 CssClass="@ThemeConstants.CssClasses.TextPrimary">🌟 Language Learning Features</H2>
            <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary">
                Specialized components for educational applications
            </p>
        </div>
        
        <div class="language-demo @ThemeConstants.CssClasses.Margin.BottomXl">
            <Card Title="📚 Language Levels" Size="CardSize.Large">
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.BottomMd">
                    CEFR levels with distinct colors for easy recognition
                </p>
                <div class="levels-demo">
                    <Badge Variant="BadgeVariant.Level" Level="A1">A1 Beginner</Badge>
                    <Badge Variant="BadgeVariant.Level" Level="A2">A2 Elementary</Badge>
                    <Badge Variant="BadgeVariant.Level" Level="B1">B1 Intermediate</Badge>
                    <Badge Variant="BadgeVariant.Level" Level="B2">B2 Upper-Intermediate</Badge>
                    <Badge Variant="BadgeVariant.Level" Level="C1">C1 Advanced</Badge>
                    <Badge Variant="BadgeVariant.Level" Level="C2">C2 Proficiency</Badge>
                </div>
            </Card>
            
            <Card Title="📝 Parts of Speech" Size="CardSize.Large">
                <p class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.BottomMd">
                    Grammatical categories with semantic colors
                </p>
                <div class="parts-demo">
                    <Badge PartOfSpeech="noun">Noun</Badge>
                    <Badge PartOfSpeech="verb">Verb</Badge>
                    <Badge PartOfSpeech="adjective">Adjective</Badge>
                    <Badge PartOfSpeech="adverb">Adverb</Badge>
                    <Badge PartOfSpeech="preposition">Preposition</Badge>
                    <Badge PartOfSpeech="conjunction">Conjunction</Badge>
                </div>
            </Card>
        </div>

        <!-- Get Started Section -->
        <Card Title="🚀 Get Started" Size="CardSize.Large" CssClass=@("get-started-card " + @ThemeConstants.CssClasses.Margin.BottomXl)>
            <p class="@ThemeConstants.CssClasses.BodyLarge @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.BottomLg">
                Ready to use EasyEnglish.Theme in your project? Install the NuGet package and start building beautiful apps!
            </p>
            
            <div class="install-code @ThemeConstants.CssClasses.Margin.BottomLg">
                <code class="@ThemeConstants.CssClasses.BodyMedium">dotnet add package EasyEnglish.Theme</code>
                <Button Variant="ButtonVariant.Ghost" Size="ButtonSize.Small" OnClick="CopyInstallCommand">
                    📋 Copy
                </Button>
            </div>
            
            <div class="cta-actions">
                <Button Variant="ButtonVariant.Primary" OnClick="@(() => NavigateToPage("/components"))">
                    Start Exploring
                </Button>
                <Button Variant="ButtonVariant.Secondary" OnClick="@(() => NavigateToPage("/colors"))">
                    View Documentation
                </Button>
            </div>
        </Card>

        <!-- Footer -->
        <div class="demo-footer @ThemeConstants.CssClasses.Padding.Lg @ThemeConstants.CssClasses.TextCenter">
            <p class="@ThemeConstants.CssClasses.Caption @ThemeConstants.CssClasses.TextTertiary">
                Built with ❤️ using .NET MAUI Blazor and modern CSS
            </p>
        </div>
    </div>
</Container>

<style>
/* Hero Section */
.hero-section {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: var(--spacing-xl);
    align-items: start;
}

.hero-content {
    max-width: 800px;
}

.hero-badge {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
}

.hero-title {
    font-size: 3.5rem;
    font-weight: var(--font-weight-bold);
    line-height: 1.1;
    background: linear-gradient(135deg, var(--color-primary-light), var(--color-accent));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.hero-description {
    max-width: 600px;
    font-size: 1.25rem;
    line-height: 1.6;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: var(--spacing-lg);
}

.stat-item {
    text-align: center;
    padding: var(--spacing-md);
    background-color: var(--color-background-secondary);
    border-radius: var(--border-radius-lg);
    border: 1px solid var(--color-border);
}

.stat-number {
    display: block;
    margin-bottom: var(--spacing-xs);
}

.cta-buttons {
    display: flex;
    gap: var(--spacing-md);
    flex-wrap: wrap;
}

.status-card {
    min-width: 280px;
}

.status-grid {
    display: grid;
    gap: var(--spacing-sm);
}

.status-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm);
    background-color: var(--color-background-tertiary);
    border-radius: var(--border-radius-md);
}

/* Section Headers */
.section-header {
    text-align: center;
    max-width: 600px;
    margin: 0 auto var(--spacing-lg);
}

/* Demo Grid */
.demo-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: var(--spacing-lg);
}

.demo-overview-card {
    cursor: pointer;
    transition: all 0.3s ease;
}

.demo-overview-card:hover {
    transform: translateY(-4px);
}

.interactive-card {
    height: 100%;
    position: relative;
    overflow: hidden;
}

.interactive-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--color-primary), var(--color-accent));
    opacity: 0;
    transition: opacity 0.3s ease;
}

.demo-overview-card:hover .interactive-card::before {
    opacity: 1;
}

/* Previews */
.color-preview {
    display: flex;
    gap: var(--spacing-xs);
}

.color-swatch {
    width: 24px;
    height: 24px;
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--color-border);
}

.typography-preview {
    padding: var(--spacing-md);
    background-color: var(--color-background-secondary);
    border-radius: var(--border-radius-md);
    border-left: 3px solid var(--color-primary);
}

.component-preview {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md);
    background-color: var(--color-background-secondary);
    border-radius: var(--border-radius-md);
}

.mini-progress {
    width: 80px;
}

.spacing-preview {
    display: flex;
    gap: var(--spacing-xs);
}

.spacing-demo {
    width: 20px;
    height: 20px;
    background-color: var(--color-primary-bg);
    border-radius: var(--border-radius-xs);
}

/* Features Grid */
.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-lg);
}

.feature-card {
    text-align: center;
    transition: transform 0.2s ease;
}

.feature-card:hover {
    transform: translateY(-2px);
}

.feature-icon {
    font-size: 3rem;
    margin-bottom: var(--spacing-md);
}

/* Language Demo */
.language-demo {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
}

.levels-demo, .parts-demo {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
}

/* Get Started */
.get-started-card {
    text-align: center;
    background: linear-gradient(135deg, var(--color-background-secondary), var(--color-surface));
    border: 1px solid var(--color-primary-bg);
}

.install-code {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-md);
    padding: var(--spacing-md) var(--spacing-lg);
    background-color: var(--color-background-tertiary);
    border-radius: var(--border-radius-lg);
    border: 1px solid var(--color-border);
    font-family: 'Courier New', Consolas, monospace;
}

.cta-actions {
    display: flex;
    justify-content: center;
    gap: var(--spacing-md);
    flex-wrap: wrap;
}

/* Footer */
.demo-footer {
    border-top: 1px solid var(--color-border);
    margin-top: var(--spacing-xl);
}

/* Responsive */
@@media (max-width: 768px) {
    .hero-section {
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
    }
    
    .hero-title {
        font-size: 2.5rem;
    }
    
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .cta-buttons {
        justify-content: center;
    }
    
    .demo-grid {
        grid-template-columns: 1fr;
    }
    
    .features-grid {
        grid-template-columns: 1fr;
    }
    
    .language-demo {
        grid-template-columns: 1fr;
    }
}

@@media (max-width: 480px) {
    .stats-grid {
        grid-template-columns: 1fr;
    }
    
    .hero-title {
        font-size: 2rem;
    }
    
    .install-code {
        flex-direction: column;
        text-align: center;
    }
}
</style>

@code {
    private string currentScreenSize = "Desktop";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        currentScreenSize = await GetCurrentScreenSize();
    }

    private async Task<string> GetCurrentScreenSize()
    {
        // Simulate responsive service call
        await Task.Delay(100);
        return "Desktop"; // This would come from ResponsiveService
    }

    private string GetResponsiveStatus()
    {
        return "Active";
    }

    private void NavigateToPage(string page)
    {
        Navigation.NavigateTo(page);
    }

    private async Task CopyInstallCommand()
    {
        // In real app, would use JSInterop to copy to clipboard
        await Task.Delay(100);
        // Show success message or use notification service
    }
}