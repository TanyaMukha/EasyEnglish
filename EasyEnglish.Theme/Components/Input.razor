@using EasyEnglish.Theme.Constants
@namespace EasyEnglish.Theme.Components

<div class="input-wrapper">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.Margin.BottomSm">@Label</label>
    }

    @if (Multiline)
    {
        <textarea class="@GetInputClasses()"
                  value="@Value"
                  placeholder="@Placeholder"
                  disabled="@Disabled"
                  rows="@Rows"
                  @oninput="OnValueChanged"
                  @attributes="AdditionalAttributes"></textarea>
    }
    else
    {
        <input class="@GetInputClasses()"
               type="@Type"
               value="@Value"
               placeholder="@Placeholder"
               disabled="@Disabled"
               @oninput="OnValueChanged"
               @attributes="AdditionalAttributes" />
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="@ThemeConstants.CssClasses.TextError @ThemeConstants.CssClasses.BodySmall @ThemeConstants.CssClasses.Margin.TopSm">
            @ErrorMessage
        </div>
    }
</div>

<style>
    .input-wrapper {
        width: 100%;
    }
</style>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string? ErrorMessage { get; set; }
    [Parameter] public bool Multiline { get; set; }
    [Parameter] public int Rows { get; set; } = 3;
    [Parameter] public string? CssClass { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetInputClasses()
    {
        var classes = new List<string>();

        if (Multiline)
            classes.Add(ThemeConstants.CssClasses.InputMultiline);
        else
            classes.Add(ThemeConstants.CssClasses.Input);

        if (HasError || !string.IsNullOrEmpty(ErrorMessage))
            classes.Add(ThemeConstants.CssClasses.InputError);

        if (Disabled)
            classes.Add(ThemeConstants.CssClasses.InputDisabled);

        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);

        return string.Join(" ", classes);
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
}