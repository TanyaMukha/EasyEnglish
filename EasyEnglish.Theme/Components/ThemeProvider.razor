@namespace EasyEnglish.Theme.Components

<CascadingValue Value="@ThemeService">
    <CascadingValue Value="@ResponsiveService">
        <CascadingValue Value="@ColorService">
            @if (IsInitialized)
            {
                @ChildContent
            }
            else
            {
                <div class="@ThemeConstants.CssClasses.LoadingContainer">
                    <div class="loading-spinner"></div>
                    <div class="@ThemeConstants.CssClasses.BodyMedium @ThemeConstants.CssClasses.TextSecondary @ThemeConstants.CssClasses.Margin.TopMd">
                        @LoadingMessage
                    </div>
                </div>
            }
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

<style>
.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--color-background-tertiary);
    border-top: 4px solid var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@@media (min-width: 768px) {
    .loading-spinner {
        width: 48px;
        height: 48px;
    }
}
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string LoadingMessage { get; set; } = "Initializing theme...";

    [Inject] public IThemeService ThemeService { get; set; } = default!;
    [Inject] public IResponsiveService ResponsiveService { get; set; } = default!;
    [Inject] public IColorService ColorService { get; set; } = default!;

    public bool IsInitialized { get; private set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await ThemeService.InitializeAsync();
                await ResponsiveService.InitializeAsync();
                IsInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Theme initialization error: {ex.Message}");
                IsInitialized = true; // Continue with defaults
                StateHasChanged();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (ResponsiveService is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }
}